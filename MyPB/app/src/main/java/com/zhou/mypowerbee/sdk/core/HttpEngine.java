package com.zhou.mypowerbee.sdk.core;import android.os.Handler;import android.os.Message;import android.util.Log;import com.zhou.mypowerbee.sdk.protocl.IServiceRequest;import com.zhou.mypowerbee.sdk.protocl.IServiceResponse;import com.zhou.mypowerbee.sdk.request.BaseRequest;import java.util.ArrayList;import java.util.List;import retrofit2.Response;public class HttpEngine extends BaseEngine {    private final String TAG = "HttpEngine";    private static HttpEngine engine;    private List<Handler> handlers;    private HttpEngine() {        super();        handlers = new ArrayList<Handler>();    }    private static synchronized void syncInti() {        if (engine == null) {            engine = new HttpEngine();        }    }    public static HttpEngine getEngine() {        if (engine == null) {            syncInti();        }        return engine;    }    public void setTimeOut(int timeout) {    }    public void addListenerHandler(Handler handler) {        if (handler != null && !handlers.contains(handler))            handlers.add(handler);    }    public void removeListenerHandler(Handler handler) {        if (handler != null && handlers.contains(handler))            handlers.remove(handler);    }    public void executeHttp(IServiceRequest request, final Class<? extends IServiceResponse> response) {        executeHttp2(request, response, null);    }    public void executeHttp2(IServiceRequest request, final Class<? extends IServiceResponse> responseClass, final HttpRequestListener listener) {        BaseRequest.HttpResponseResult responseResult = new BaseRequest.HttpResponseResult() {            @Override            public void success(Response<String> response) {                if (!response.isSuccessful())                    Log.e("", "请求失败");                try {                    IServiceResponse iServiceResponse = responseClass.newInstance();                    iServiceResponse.initData(response.body().toString());                    for (Handler handler : handlers) {                        handler.sendMessage(Message.obtain(null, NET_RECIVED_SUCCESS, iServiceResponse));                    }                    if (listener != null)                        listener.responseResult(iServiceResponse);                } catch (InstantiationException e) {                    e.printStackTrace();                } catch (IllegalAccessException e) {                    e.printStackTrace();                }            }            @Override            public void failure(String msg) {                    System.out.println("请求失败");            }        };        request.setResponse(responseResult);        request.executeHttp();    }    public static interface HttpRequestListener {        public void responseResult(IServiceResponse response);        public void responseFailure();    }}